plugins {
    id 'java-library'
    id "io.freefair.lombok" version "8.6"
    id "io.qameta.allure" version "2.11.2"
}

repositories {
    mavenCentral()
}

def allureVersion = '2.24.0',
    selenideVersion = '7.0.4',
    appiumVersion = '9.1.0',
    restAssuredVersion = '5.4.0',
    junitVersion = "5.10.2",
    slf4jVersion = '2.0.9',
    ownerVersion = "1.0.12",
    commonsIoVersion = "2.15.1",
    assertjVersion = '3.25.3',
    jacksonVersion = "2.16.1"

allure {
    version = allureVersion

    adapter {
        frameworks {
            junit5 {
                adapterVersion = allureVersion
            }
        }
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            'commons-codec:commons-codec:1.15',
            "net.datafaker:datafaker:2.0.2",
            "com.codeborne:selenide:$selenideVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.appium:java-client:$appiumVersion",
            "commons-io:commons-io:$commonsIoVersion",
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "org.aspectj:aspectjweaver:1.9.20"
    )
}

tasks.withType(Test).configureEach {
    ignoreFailures = true
    useJUnitPlatform()

    systemProperties = [
            'allure.results.directory': 'build/allure-results',
            'allure.link.issue.pattern': 'https://jira.yourcompany.com/browse/{}',
            'allure.link.tms.pattern'  : 'https://testops.yourcompany.com/tms/{}',
            'junit.jupiter.execution.parallel.enabled': 'false'
    ]

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}

tasks.register('webTests', Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        includeTags 'WEB'
    }
}

tasks.register('apiTests', Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        includeTags 'API'
    }
}

tasks.register('mobileTests', Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        includeTags 'MOBILE'
    }
}

tasks.register('allTests', Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform {
        includeTags 'ALL'
    }
}